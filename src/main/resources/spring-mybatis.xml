<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	 <!-- 读取jdbc配置 -->
	<bean class="com.ganhuo.app.com.EncryptablePropertyPlaceholderConfigurer">
		<constructor-arg name="key" value="362C1E982014B30D73DFCEAE0A" />
		<property name="locations">
			<list>
				<!-- jdbc配置 -->
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 阿里巴巴链接池配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<property name="filters" value="stat" />

		<property name="maxActive" value="20" />
		<property name="initialSize" value="1" />
		<property name="maxWait" value="60000" />
		<property name="minIdle" value="1" />

		<property name="timeBetweenEvictionRunsMillis" value="3000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定连接池 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 指定mapper文件 -->
		<property name="mapperLocations" value="classpath*:com/ganhuo/app/mappers/*Mapper.xml" />
		<!-- <property name="mapperLocations" value="classpath:*Mapper.xml" /> -->
		<!-- 指定别名包 -->
		<property name="typeAliasesPackage" value="com.ganhuo.app.entity" />
	</bean>
	
	<!-- 配置sqlsession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" name="sqlSessionFactory"
			ref="sqlSessionFactory" />
	</bean>
	
	<!-- 启用Mapper接口作为DAO的接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 批量为Mapper注册映射接口 -->
		<property name="basePackage" value="com.ganhuo.app.dao" />
		<!--限制只有@Repository注解才会把它装配为mapper -->
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
	</bean>
	
	<!-- spring 事物 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
     <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- 开启事物注解 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>
